Welcome to PyChess!

This is a python app purely created from scratch using just Python(cpython version 3.7.3) and Pygame.

To run the game, download Pygame library and run the- main.py file.
You will see the chess board appear. Go ahead and enjoy the chess match with your friend.

Under just 400 lines of code, this is very light and efficient.

If you take a look at the source code, you can observe that
Object Oriented Programming style has not been used. Instead, a Functional Programming approach has been taken. The code might be compicated, but it works.

To explain in short- how the logic works in the chess game,
- Pygame provides the tools for GUI and mouse handling
- There are 2 lists that hold the position of each piece
- The functions are written, each with a specific use to handle data and play chess
The functions work together in such a manner that they seamlesly integrate to provide a decent chess experience and using less disk space, processor and memory.

Docs: 
The main.py file handles the GUI and user actions:-
myutils.py defines the functions that run the game.
All functions as defined in- myutils.py(version 1.3) file are:-
- getChoice() -- This function gets user input when pawn promotion can be done(under development for now)
- drawBoard() -- This function draws the first layer on screen(i.e the chess board)
- getPiece() -- This returns the name of a piece if its position is given
- move() -- This moves a piece from one position to another(and does some other stuff too)
- doRoutine() --  This is called in the main program regularly to keep checking positon of king and rooks(for castling purposes)
- drawPieces() -- This draws the pieces onto the board based on their current position
- isOccupied() -- given a position, this returns who occupies it
- allMoves() -- given a side, it yields all the available moves for every piece of that side(along with some more functions)
- isChecked() -- given a position, it determines wether the enemy is attacking the place.If the positon is not passed, it returns wether the king of the side is in check or not
- isCheckmate() -- given a side, determines wether it is checkmated or not
- availableMoves() -- for a given piece type and its positon, it yields the available positons it can take
